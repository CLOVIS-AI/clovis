stages:
  - build
  - test
  - deploy

variables:
  TEST_DB_IMAGE: "$CI_REGISTRY_IMAGE/mariadb-client:$CI_PIPELINE_IID"
  RELEASE_DB_IMAGE: "$CI_REGISTRY_IMAGE/mariadb-client:latest"
  OPENJDK_IMAGE: "openjdk:11"

.gradle:
  script: &prepare_gradle
    - export GRADLE_USER_HOME=$(pwd)/.gradle
    - cp server/gradle-local.gitlab.properties server/gradle-local.properties
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches

server » build:
  stage: build
  image: $OPENJDK_IMAGE
  extends: [ .gradle ]
  before_script:
    - *prepare_gradle
  script:
    - mkdir -p bin/server-zip
    - "./gradlew :server:distZip"
    - mv server/build/distributions/*.zip bin/server-zip/
  artifacts:
    paths:
      - bin/server-zip/

.dockerBuild:
  image: docker:20.10.3
  services:
    - docker:dind
  script: &prepare_docker
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

docker » build database:
  stage: build
  extends: [ .dockerBuild ]
  before_script:
    - *prepare_docker
  script:
    - docker pull $TEST_DB_IMAGE || true
    - docker pull $RELEASE_DB_IMAGE || true
    - >
      docker build
      --pull
      --tag $TEST_DB_IMAGE
      -f $CI_PROJECT_DIR/docker/database.Dockerfile
      .
    - docker push $TEST_DB_IMAGE
  tags:
    - docker

.requiresServer:
  needs:
    - server » build
  dependencies:
    - server » build
  before_script: &prepare_server
    - mkdir -p bin/server
    - unzip bin/server-zip/server-*.zip -d bin/server/
    - <server/gradle-local.gitlab.properties sed '/^#/b; /^$/b; s/^/export /' >properties
    - source properties
    - ./bin/server/server-*/bin/server &

.requiresDatabase:
  services:
    - mariadb
  variables:
    MYSQL_DATABASE: clovis
    MYSQL_ROOT_PASSWORD: super_safe_password
  script: &prepare_database
    - <database/src/main/resources/sql/init.sql mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mariadb "$MYSQL_DATABASE"

client » test jvm:
  stage: test
  image: $TEST_DB_IMAGE
  extends: [ .gradle, .requiresServer, .requiresDatabase ]
  needs:
    - docker » build database
    - server » build
  before_script:
    - *prepare_gradle
    - *prepare_server
    - *prepare_database
  script:
    - "./bin/server/server-*/bin/server --test-data"
    - "./gradlew :client:jvmTest"
  artifacts:
    reports:
      junit: client/build/test-results/jvmTest/**/TEST-*.xml

server » test:
  stage: test
  image: $TEST_DB_IMAGE
  extends: [ .gradle, .requiresDatabase ]
  before_script:
    - *prepare_gradle
    - *prepare_database
  script:
    - "./gradlew :server:run --args='--test-data'"
    - "./gradlew :server:test :server:printCoverage"
  artifacts:
    reports:
      junit: server/build/test-results/test/**/TEST-*.xml
  coverage: '/^Coverage:\s(\d+\.\d+%)/'

database » test:
  stage: test
  image: $TEST_DB_IMAGE
  extends: [ .gradle, .requiresDatabase ]
  before_script:
    - *prepare_gradle
    - *prepare_database
  script:
    - "./gradlew :server:run --args='--test-data'"
    - "./gradlew :database:test :database:printCoverage"
  artifacts:
    reports:
      junit: server/build/test-results/test/**/TEST-*.xml
  coverage: '/^Coverage:\s(\d+\.\d+%)/'

telegram:
  stage: deploy
  image: registry.gitlab.com/clovis-ai/dotfiles:latest
  needs: [ ]
  script:
    - git changelog --format telegram-html --incoming >changelog
    - announce-telegram changelog "$CHAT_IDS"
  only:
    - master
